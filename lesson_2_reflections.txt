What happens when you initialize a repository? Why do you need to do it?

- Initializing a repository creates a .git directory inside the current
directory. It's a crucial first step to tracking a project with git because
the .git directory stores all the meta-data used to track commits.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

- The staging area is a place to decide what goes into a commit. If there
were no staging area and you'd changed several files, you would have no
way of breaking those changes into several commits, even if they constituted
different logical changes. The staging area allows you to break up current
changes into several commits if you so desire.

How can you use the staging area to make sure you have one commit per
logical change?

- If two separate logical changes are made, each to a separate file, those
changes can be made in two separate commits using the staging area to
commit first one file, then the other.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

- If there are two different versions of a project (e.g. and experimental
version and a stable version), branches allow both to worked on side by
side without confusing copies of files everywhere.

How do the diagrams help you visualize the branch structure?

- They help me understand the relationships between commits and different
branches.

What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?

- The result is that all the changes that were made on both branches to their
common ancestor are added to that common ancestor, and that becomes the new
commit.
